guess = 10
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
mean(tt_sample$scores)
mean(ut_sample$scores)
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
mean(tt_sample$scores)
mean(ut_sample$scores)
mean(tt_sample$scores)
mean(ut_sample$scores)
mean(tt_sample$scores)
mean(ut_sample$scores)
mean(tt_sample$scores)
mean(ut_sample$scores)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample(n1)
sample_2 = s2 %>% sample(n2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
tt_sample = sample_n(tt_math, size = guess)
s1 = tt_math
ut_sample = sample_n(ut_math, size = guess)
s2 = ut_math
sample_1 = s1 %>% sample_n(n1)
n1 = 10
n2 = 10
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1,sample_2)
sample_1
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
View(tt_math)
t.test(tt_sample$scores, ut_sample$scores)
ok=t.test(tt_sample$scores, ut_sample$scores)
View(ok)
ok[["p.value"]]
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
# Load libraries
library(tidyverse)
# Set the seed so that we can reproduce the simulation exactly
set.seed(927)
# Set the level of variation
sd_for_all = 10
## Simulating Texas Tech math scores
tt_math = data.frame(scores = rnorm(n = 500, mean = 75, sd = sd_for_all)) %>%
mutate(source = "texas_tech")
## Simulating UT Austin math scores
ut_math = data.frame(scores = rnorm(n = 500, mean = 65, sd = sd_for_all)) %>%
mutate(source = "ut_austin")
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(927)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
tt_math
ut_math
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 60, n2 = 60)
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(921)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(91)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(4)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
# Load libraries
library(tidyverse)
# Set the seed so that we can reproduce the simulation exactly
set.seed(920)
# Set the level of variation
sd_for_all = 20
## Simulating Texas Tech math scores
tt_math = data.frame(scores = rnorm(n = 500, mean = 75, sd = sd_for_all)) %>%
mutate(source = "texas_tech")
## Simulating UT Austin math scores
ut_math = data.frame(scores = rnorm(n = 500, mean = 65, sd = sd_for_all)) %>%
mutate(source = "ut_austin")
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(4)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
# Load libraries
library(tidyverse)
# Set the seed so that we can reproduce the simulation exactly
set.seed(920)
# Set the level of variation
sd_for_all = 20
## Simulating Texas Tech math scores
tt_math = data.frame(scores = rnorm(n = 500, mean = 75, sd = sd_for_all)) %>%
mutate(source = "texas_tech")
## Simulating UT Austin math scores
ut_math = data.frame(scores = rnorm(n = 500, mean = 65, sd = sd_for_all)) %>%
mutate(source = "ut_austin")
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(4)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
knitr::include_app("https://kparrish92.shinyapps.io/pa_demo/")
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 10, n2 = 10)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 20, n2 = 20)
twen = power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 20, n2 = 20)
thirty = power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 30, n2 = 30)
fourty = power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 40, n2 = 40)
fifty = power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 50, n2 = 50)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 60, n2 = 60
)
power_analysis_single_ul(tt_math, ut_math, i = 100, n1 = 60, n2 = 60)
sample_1 = tt_math %>% sample_n(tt_math)
tt_math %>% sample_n(tt_math)
i = 100
sample_1 = tt_math %>% sample_n(30)
sample_2 = ut_math %>% sample_n(30)
t_test = t.test(sample_1$scores,sample_2$scores)
t_test
loop_df
t_test
mean(sample_1$scores)-mean(sample_2$scores)
mean(sample_1$scores)-mean(sample_2$scores)
mean(sample_1$scores)-mean(sample_2$scores)
mean(sample_1$scores)-mean(sample_2$scores)
mean(sample_1$scores)-mean(sample_2$scores)
mean(sample_1$scores)-mean(sample_2$scores)
t_test$p.value
loop_df[thisRun, 1] = t_test$p.value
loop_df = matrix(nrow = i, ncol = 2)
loop_df[thisRun, 1] = t_test$p.value
thisRun = 1
loop_df[thisRun, 1] = t_test$p.value
loop_df[thisRun, 2] = mean(sample_1$scores)-mean(sample_2$scores)
loop_df = matrix(nrow = i, ncol = 2)
for(thisRun in 1:i){
sample_1 = tt_math %>% sample_n(30)
sample_2 = ut_math %>% sample_n(30)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun, 1] = t_test$p.value
loop_df[thisRun, 2] = mean(sample_1$scores)-mean(sample_2$scores)
}
View(loop_df)
source("~/.active-rstudio-document", echo=TRUE)
loop_df %>% as.data.frame() %>%
rename(V1 == "FEa")
loop_df %>% as.data.frame() %>%
rename("p_value" == V1)
loop_df %>% as.data.frame() %>%
rename("p_value" == "V1")
loop_df %>% as.data.frame()
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1")
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2")
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2") %>%
filter(p_value < .05)
i = 100
loop_df = matrix(nrow = i, ncol = 2)
for(thisRun in 1:i){
sample_1 = tt_math %>% sample_n(30)
sample_2 = ut_math %>% sample_n(30)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun, 1] = t_test$p.value
loop_df[thisRun, 2] = mean(sample_1$scores)-mean(sample_2$scores)
}
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2") %>%
filter(p_value < .05)
i = 1000
loop_df = matrix(nrow = i, ncol = 2)
for(thisRun in 1:i){
sample_1 = tt_math %>% sample_n(30)
sample_2 = ut_math %>% sample_n(30)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun, 1] = t_test$p.value
loop_df[thisRun, 2] = mean(sample_1$scores)-mean(sample_2$scores)
}
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2") %>%
filter(p_value < .05)
power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 30, n2 = 30)
library(here)
library(tidyverse)
htmltools::tagList(
xaringanExtra::use_clipboard(
button_text = "<i class=\"fa fa-clipboard\"></i>",
success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
),
rmarkdown::html_dependency_font_awesome()
)
# Load libraries
library(tidyverse)
# Set the seed so that we can reproduce the simulation exactly
set.seed(920)
# Set the level of variation
sd_for_all = 20
## Simulating Texas Tech math scores
tt_math = data.frame(scores = rnorm(n = 500, mean = 75, sd = sd_for_all)) %>%
mutate(source = "texas_tech")
## Simulating UT Austin math scores
ut_math = data.frame(scores = rnorm(n = 500, mean = 65, sd = sd_for_all)) %>%
mutate(source = "ut_austin")
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(4)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
twen = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 20, n2 = 20)
thirty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 30, n2 = 30)
fourty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 40, n2 = 40)
fifty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 50, n2 = 50)
sixty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 60, n2 = 60)
seven = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 70, n2 = 70)
eight = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 80, n2 = 80)
i = 1000
loop_df = matrix(nrow = i, ncol = 2)
for(thisRun in 1:i){
sample_1 = tt_math %>% sample_n(30)
sample_2 = ut_math %>% sample_n(30)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun, 1] = t_test$p.value
loop_df[thisRun, 2] = mean(sample_1$scores)-mean(sample_2$scores)
}
loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2") %>%
filter(p_value < .05)
results = loop_df %>% as.data.frame() %>%
rename("p_value" = "V1") %>%
rename("mean_difference" = "V2") %>%
filter(p_value < .05)
nrow(results)/i
mean(results$mean_difference)
min(results$mean_difference)
max(results$mean_difference)
View(results)
median(results$mean_difference)
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
twen = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 20, n2 = 20)
library(here)
library(tidyverse)
htmltools::tagList(
xaringanExtra::use_clipboard(
button_text = "<i class=\"fa fa-clipboard\"></i>",
success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
),
rmarkdown::html_dependency_font_awesome()
)
# Load libraries
library(tidyverse)
# Set the seed so that we can reproduce the simulation exactly
set.seed(920)
# Set the level of variation
sd_for_all = 20
## Simulating Texas Tech math scores
tt_math = data.frame(scores = rnorm(n = 500, mean = 75, sd = sd_for_all)) %>%
mutate(source = "texas_tech")
## Simulating UT Austin math scores
ut_math = data.frame(scores = rnorm(n = 500, mean = 65, sd = sd_for_all)) %>%
mutate(source = "ut_austin")
# Specify here what your guess is - how many tests do we need?
guess = 10
# Set the seed so that we can reproduce the simulation exactly
set.seed(4)
# Extract a number of rows from the underlying distribution equal to `guess`
tt_sample = sample_n(tt_math, size = guess)
ut_sample = sample_n(ut_math, size = guess)
# Calculate the mean difference between the extracted samples - remember the true difference is 10
mean(tt_sample$scores)-mean(ut_sample$scores)
t.test(tt_sample$scores, ut_sample$scores)
knitr::include_app("https://kparrish92.shinyapps.io/pa_demo/", height = "600px")
# Create a function to run a single power analysis, given two samples, a number of desired iterations (i) and the size of group 1 (n1) and group 2 (n2)
power_analysis_single_ul = function(s1, s2, i, n1, n2)
{
loop_df = matrix(nrow = i)
for(thisRun in 1:i){
sample_1 = s1 %>% sample_n(n1)
sample_2 = s2 %>% sample_n(n2)
t_test = t.test(sample_1$scores,sample_2$scores)
loop_df[thisRun] = t_test$p.value
}
return(sum(loop_df < .05)/i)
}
# Run the function to check our power
twen = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 20, n2 = 20)
thirty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 30, n2 = 30)
fourty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 40, n2 = 40)
fifty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 50, n2 = 50)
sixty = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 60, n2 = 60)
seven = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 70, n2 = 70)
eight = power_analysis_single_ul(tt_math, ut_math, i = 1000, n1 = 80, n2 = 80)
library(tidyverse)
# install.packages("datos")
library(datos)
install.packages("datos")
datos::millas
d = datos::millas
View(d)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista))
ggplot(data = millas) +
geom_point(mapping = aes(x = autopista, y = cilindrada))
ggplot(data = millas)
ggplot(data = millas) +
geom_point(mapping = aes(x = clase, y = traccion))
nrow(millas)
nrow(millas)
ncol(millas)
ggplot(data = millas) +
geom_point(mapping = aes(x = clase, y = traccion))
knitr::include_graphics(here::here("images", "intro.png"))
knitr::include_graphics(here::here("ug_teaching", "images", "intro.png"))
knitr::include_graphics(here::here("texas_tech", "ug_teaching", "images", "intro.png"))
knitr::include_graphics(here::here("texas_tech", "ug_teaching", "images", "autopista_red.png"))
?millas
View(d)
glimpse(d)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, color = cilindrada))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = cilindrada, color = cilindrada))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, color = cilindrada))
# Una función básica: calcular la media
valores <- c(10, 20, 30, 40, 50)
# La función mean toma un argumento principal (x)
promedio <- mean(valores)
promedio # Devuelve 30
